#![allow(overflowing_literals)]


const ROOK_MASK: [u64; 64] = [282578800148862,565157600297596,1130315200595066,2260630401190006,4521260802379886,9042521604759646,18085043209519166,36170086419038334,282578800180736,565157600328704,1130315200625152,2260630401218048,4521260802403840,9042521604775424,18085043209518592,36170086419037696,282578808340736,565157608292864,1130315208328192,2260630408398848,4521260808540160,9042521608822784,18085043209388032,36170086418907136,282580897300736,565159647117824,1130317180306432,2260632246683648,4521262379438080,9042522644946944,18085043175964672,36170086385483776,283115671060736,565681586307584,1130822006735872,2261102847592448,4521664529305600,9042787892731904,18085034619584512,36170077829103616,420017753620736,699298018886144,1260057572672512,2381576680245248,4624614895390720,9110691325681664,18082844186263552,36167887395782656,35466950888980736,34905104758997504,34344362452452352,33222877839362048,30979908613181440,26493970160820224,17522093256097792,35607136465616896,9079539427579068672,8935706818303361536,8792156787827803136,8505056726876686336,7930856604974452736,6782456361169985536,4485655873561051136,9115426935197958144];
const BISHOP_MASK: [u64; 64] = [18049651735527936,70506452091904,275415828992,1075975168,38021120,8657588224,2216338399232,567382630219776,9024825867763712,18049651735527424,70506452221952,275449643008,9733406720,2216342585344,567382630203392,1134765260406784,4512412933816832,9024825867633664,18049651768822272,70515108615168,2491752130560,567383701868544,1134765256220672,2269530512441344,2256206450263040,4512412900526080,9024834391117824,18051867805491712,637888545440768,1135039602493440,2269529440784384,4539058881568768,1128098963916800,2256197927833600,4514594912477184,9592139778506752,19184279556981248,2339762086609920,4538784537380864,9077569074761728,562958610993152,1125917221986304,2814792987328512,5629586008178688,11259172008099840,22518341868716544,9007336962655232,18014673925310464,2216338399232,4432676798464,11064376819712,22137335185408,44272556441600,87995357200384,35253226045952,70506452091904,567382630219776,1134765260406784,2832480465846272,5667157807464448,11333774449049600,22526811443298304,9024825867763712,18049651735527936];
const ROOK_SHIFTS: [u64;64] = [ 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 54, 53, 53, 54, 53, 53, 54, 54, 54, 53, 53, 54, 53, 53, 54, 53, 53, 54, 54, 54, 53, 52, 54, 53, 53, 53, 53, 54, 53, 52, 53, 54, 54, 53, 53, 54, 53, 53, 54, 54, 54, 53, 53, 54, 53, 52, 53, 53, 53, 53, 53, 53, 52 ];
const BISHOP_SHIFTS: [u64;64] = [ 58, 60, 59, 59, 59, 59, 60, 58, 60, 59, 59, 59, 59, 59, 59, 60, 59, 59, 57, 57, 57, 57, 59, 59, 59, 59, 57, 55, 55, 57, 59, 59, 59, 59, 57, 55, 55, 57, 59, 59, 59, 59, 57, 57, 57, 57, 59, 59, 60, 60, 59, 59, 59, 59, 60, 60, 58, 60, 59, 59, 59, 59, 59, 58 ];
const ROOK_MAGICS: [u64;64] = [ 468374916371625120, 18428729537625841661, 2531023729696186408, 6093370314119450896, 13830552789156493815, 16134110446239088507, 12677615322350354425, 5404321144167858432, 2111097758984580, 18428720740584907710, 17293734603602787839, 4938760079889530922, 7699325603589095390, 9078693890218258431, 578149610753690728, 9496543503900033792, 1155209038552629657, 9224076274589515780, 1835781998207181184, 509120063316431138, 16634043024132535807, 18446673631917146111, 9623686630121410312, 4648737361302392899, 738591182849868645, 1732936432546219272, 2400543327507449856, 5188164365601475096, 10414575345181196316, 1162492212166789136, 9396848738060210946, 622413200109881612, 7998357718131801918, 7719627227008073923, 16181433497662382080, 18441958655457754079, 1267153596645440, 18446726464209379263, 1214021438038606600, 4650128814733526084, 9656144899867951104, 18444421868610287615, 3695311799139303489, 10597006226145476632, 18436046904206950398, 18446726472933277663, 3458977943764860944, 39125045590687766, 9227453435446560384, 6476955465732358656, 1270314852531077632, 2882448553461416064, 11547238928203796481, 1856618300822323264, 2573991788166144, 4936544992551831040, 13690941749405253631, 15852669863439351807, 18302628748190527413, 12682135449552027479, 13830554446930287982, 18302628782487371519, 7924083509981736956, 4734295326018586370 ];
const BISHOP_MAGICS: [u64;64] = [ 16509839532542417919, 14391803910955204223, 1848771770702627364, 347925068195328958, 5189277761285652493, 3750937732777063343, 18429848470517967340, 17870072066711748607, 16715520087474960373, 2459353627279607168, 7061705824611107232, 8089129053103260512, 7414579821471224013, 9520647030890121554, 17142940634164625405, 9187037984654475102, 4933695867036173873, 3035992416931960321, 15052160563071165696, 5876081268917084809, 1153484746652717320, 6365855841584713735, 2463646859659644933, 1453259901463176960, 9808859429721908488, 2829141021535244552, 576619101540319252, 5804014844877275314, 4774660099383771136, 328785038479458864, 2360590652863023124, 569550314443282, 17563974527758635567, 11698101887533589556, 5764964460729992192, 6953579832080335136, 1318441160687747328, 8090717009753444376, 16751172641200572929, 5558033503209157252, 17100156536247493656, 7899286223048400564, 4845135427956654145, 2368485888099072, 2399033289953272320, 6976678428284034058, 3134241565013966284, 8661609558376259840, 17275805361393991679, 15391050065516657151, 11529206229534274423, 9876416274250600448, 16432792402597134585, 11975705497012863580, 11457135419348969979, 9763749252098620046, 16960553411078512574, 15563877356819111679, 14994736884583272463, 9441297368950544394, 14537646123432199168, 9888547162215157388, 18140215579194907366, 18374682062228545019 ];

pub static mut ROOK_MOVES: [Vec<u64>; 64] = [NEW_VEC; 64];// rook_moves();
pub static mut BISHOP_MOVES: [Vec<u64>; 64] = [NEW_VEC; 64];// rook_moves();
static mut IS_SETUP: bool = false;


const NEW_VEC: Vec<u64> = Vec::new();

fn rook_moves() -> [Vec<u64>; 64]{
    let mut res = [NEW_VEC; 64];
    let mut i = 0;
    while i < 64 {
        res[i] = get_rook_moves(i as u8, ROOK_MASK[i]);
        i += 1;
    }
    res
}

fn bishop_moves() -> [Vec<u64>; 64]{
    let mut res = [NEW_VEC; 64];
    let mut i = 0;
    while i < 64 {
        res[i] = get_bishop_moves(i as u8, BISHOP_MASK[i]);
        i += 1;
    }
    res
}

pub fn setup(){
    unsafe{
        ROOK_MOVES = rook_moves();
        BISHOP_MOVES = bishop_moves();
        IS_SETUP = true;
    }
}

pub fn get_orthogonal_moves(pos: usize, blockers: u64) -> u64{
    unsafe{
        if !IS_SETUP{ setup() }
        let idx = ((blockers & ROOK_MASK[pos]).wrapping_mul(ROOK_MAGICS[pos])>>ROOK_SHIFTS[pos]) as usize;
        ROOK_MOVES[pos][idx]
    }
}

pub fn get_diagonal_moves(pos: usize, blockers: u64) -> u64{
    unsafe{
        if !IS_SETUP{ setup() }
        let idx = ((blockers & BISHOP_MASK[pos]).wrapping_mul(BISHOP_MAGICS[pos])>>BISHOP_SHIFTS[pos]) as usize;
        BISHOP_MOVES[pos][idx]
    }
}

fn get_set_bits(mut mask: u64) -> [u32; 64]{
    let mut res = [0;64];
    let mut i = 0;
    while mask != 0 {
        res[i] = mask.trailing_zeros();
        mask ^= 1<<mask.trailing_zeros();
        i += 1;
    }
    res
}

fn mask_i(mut idx: u32, bits: [u32; 64]) -> u64{
    let mut res = 0;
    while idx != 0 {
        res |= 1<<bits[idx.trailing_zeros() as usize];
        idx ^= 1<<idx.trailing_zeros();
    }
    res
}

fn get_rook_moves(pos: u8, mask: u64) -> Vec<u64>{
    let nbr = 1<<mask.count_ones();
    let bits = get_set_bits(mask);
    let mut res = vec![0;4096];
    let mut i = 0;
    while i < nbr {
        let specific_mask = mask_i(i, bits);
        let moves = get_rook_moves_pos_mask(pos, specific_mask);
        let idx = (specific_mask.wrapping_mul(ROOK_MAGICS[pos as usize])>>ROOK_SHIFTS[pos as usize]) as usize;
        if res[idx] != 0{
            assert_eq!(res[idx], moves);
        }
        res[idx] = moves;
        i += 1;
    }
    res
}

fn get_bishop_moves(pos: u8, mask: u64) -> Vec<u64>{
    let nbr = 1<<mask.count_ones();
    let bits = get_set_bits(mask);
    let mut res = vec![0;512];
    let mut i = 0;
    while i < nbr {
        let specific_mask = mask_i(i, bits);
        let moves = get_bishop_moves_pos_mask(pos, specific_mask);
        let idx = (specific_mask.wrapping_mul(BISHOP_MAGICS[pos as usize])>>BISHOP_SHIFTS[pos as usize]) as usize;
        if res[idx] != 0{
            assert_eq!(res[idx], moves);
        }
        res[idx] = moves;
        i += 1;
    }
    res
}

fn get_rook_moves_pos_mask(pos: u8, mask: u64) -> u64{
    let rank = (pos & 0b111000)>>3;
    let file = pos & 0b111;
    let mut i = 1;
    let mut moves = 0;
    while rank + i < 8 {
        moves |= 1<<((rank+i)*8+file);
        if 1<<((rank+i)*8+file) & mask != 0{ break; }
        i += 1;
    }
    i = 1;
    while rank >= i {
        moves |= 1<<((rank-i)*8+file);
        if 1<<((rank-i)*8+file) & mask != 0{ break; }
        i += 1;
    }
    i = 1;

    while file + i < 8 {
        moves |= 1<<(rank*8+file+i);
        if 1<<(rank*8+file+i) & mask != 0{ break; }
        i += 1;
    }
    i = 1;

    while file >= i {
        moves |= 1<<(rank*8+file-i);
        if 1<<(rank*8+file-i) & mask != 0{ break; }
        i += 1;
    }
    moves
}

fn get_bishop_moves_pos_mask(pos: u8, mask: u64) -> u64{
    let rank = (pos & 0b111000)>>3;
    let file = pos & 0b111;
    let mut i = 1;
    let mut moves = 0;
    while rank + i < 8 && file + i < 8 {
        moves |= 1<<((rank+i)*8+file+i);
        if 1<<((rank+i)*8+file+i) & mask != 0{ break; }
        i += 1;
    }
    i = 1;
    while rank >= i && file + i < 8{
        moves |= 1<<((rank-i)*8+file+i);
        if 1<<((rank-i)*8+file+i) & mask != 0{ break; }
        i += 1;
    }
    i = 1;

    while rank >= i && file >= i {
        moves |= 1<<((rank-i)*8+file-i);
        if 1<<((rank-i)*8+file-i) & mask != 0{ break; }
        i += 1;
    }
    i = 1;

    while rank + i < 8 && file >= i {
        moves |= 1<<((rank+i)*8+file-i);
        if 1<<((rank+i)*8+file-i) & mask != 0{ break; }
        i += 1;
    }
    moves
}




#[cfg(test)]
mod test{
    use crate::{movegeneration::magic::{get_orthogonal_moves, setup, ROOK_MASK}, utils::vec_pos_to_bitmap};

    #[test]
    fn rook_mask_test(){
        assert_eq!(ROOK_MASK[0], vec_pos_to_bitmap(vec![1,2,3,4,5,6,8,16,24,32,40,48]));
        assert_eq!(ROOK_MASK[9], vec_pos_to_bitmap(vec![10,11,12,13,14,17,25,33,41,49]));
        assert_eq!(ROOK_MASK[63], vec_pos_to_bitmap(vec![57,58,59,60,61,62,15,23,31,39,47,55]));
    }

    #[test]
    fn rook_moves(){
        setup();
        assert_eq!(get_orthogonal_moves(0, 2), 72340172838076674);
        assert_eq!(get_orthogonal_moves(0, 0), 72340172838076926);

    }
}